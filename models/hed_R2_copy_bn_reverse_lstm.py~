import torch.nn as nn
import math
import torch
import torch.nn.functional as F
from torch_deform_conv.layers import ConvOffset2D as DEF

class HED_R2(nn.Module):
    def __init__(self, dilation=0):
        super(HED_R2, self).__init__()
        self.conv1 = nn.Sequential(
            # conv1
            # nn.Conv2d(3, 64, 3, padding=1),
            # nn.BatchNorm2d(64),
            # nn.ReLU(inplace=True),
            nn.Conv2d(64, 64, 3, padding=1),
            nn.BatchNorm2d(64),
            nn.ReLU(inplace=True),
        )
        self.conv2 = nn.Sequential(
            # conv2
            nn.MaxPool2d(2, stride=2, ceil_mode=True),  # 1/2
            nn.Conv2d(64, 128, 3, padding=1),
            nn.BatchNorm2d(128),
            nn.ReLU(inplace=True),
            nn.Conv2d(128, 128, 3, padding=1),
            nn.BatchNorm2d(128),
            nn.ReLU(inplace=True),   
        )
        self.conv3 = nn.Sequential(
            # conv3
            nn.MaxPool2d(2, stride=2, ceil_mode=True),  # 1/4
            nn.Conv2d(128, 256, 3, padding=1),
            nn.BatchNorm2d(256),
            nn.ReLU(inplace=True),
            nn.Conv2d(256, 256, 3, padding=1),
            nn.BatchNorm2d(256),
            nn.ReLU(inplace=True),
            nn.Conv2d(256, 256, 3, padding=1),
            nn.BatchNorm2d(256),
            nn.ReLU(inplace=True),   
        )
        self.conv4 = nn.Sequential(
            # conv4
            nn.MaxPool2d(2, stride=2, ceil_mode=True),  # 1/8
            nn.Conv2d(256, 512, 3, padding=1),
            nn.BatchNorm2d(512),
            nn.ReLU(inplace=True),
            nn.Conv2d(512, 512, 3, padding=1),
            nn.BatchNorm2d(512),
            nn.ReLU(inplace=True),
            nn.Conv2d(512, 512, 3, padding=1),
            nn.BatchNorm2d(512),
            nn.ReLU(inplace=True),            
        )
        self.conv5 = nn.Sequential(
            # conv5
            nn.MaxPool2d(2, stride=2, ceil_mode=True),  # 1/16
            nn.Conv2d(512, 512, 3, padding=1),
            nn.BatchNorm2d(512),
            nn.ReLU(inplace=True),
            nn.Conv2d(512, 512, 3, padding=1),
            nn.BatchNorm2d(512),
            nn.ReLU(inplace=True),
            nn.Conv2d(512, 512, 3, padding=1),
            nn.BatchNorm2d(512),
            nn.ReLU(inplace=True),
        )

        ###### LSTM #####
        self.lstm = nn.LSTM(512, 262144, 2,
                            batch_first=True)

        ###### end #####

        # RFC
        self.RFC1_1 = nn.Sequential(
            nn.Conv2d(64, 64, 1),
            nn.BatchNorm2d(64),
            nn.ReLU(inplace=True),
        )
        self.RFC1_2 = nn.Sequential(
            nn.ConvTranspose2d(128, 64, 2, 2),
            nn.BatchNorm2d(64),
            nn.ReLU(inplace=True),
        )
        self.RFC1_3 = nn.Sequential(
            nn.ConvTranspose2d(256, 64, 4, 4),
            nn.BatchNorm2d(64),
            nn.ReLU(inplace=True),
        )
        self.RFC1_4 = nn.Sequential(
            nn.ConvTranspose2d(512, 64, 8, 8),
            nn.BatchNorm2d(64),
            nn.ReLU(inplace=True),
        )
        self.RFC1_5 = nn.Sequential(
            nn.ConvTranspose2d(512, 64, 16, 16),
            nn.BatchNorm2d(64),
            nn.ReLU(inplace=True),
        )

        self.RFC2_1 = nn.Sequential(
            nn.Conv2d(64, 64, 2, 2),
            nn.BatchNorm2d(64),
            nn.ReLU(inplace=True),
        )
        self.RFC2_2 = nn.Sequential(
            nn.Conv2d(128, 64, 1),
            nn.BatchNorm2d(64),
            nn.ReLU(inplace=True),
        )
        self.RFC2_3 = nn.Sequential(
            nn.ConvTranspose2d(256, 64, 2, 2),
            nn.BatchNorm2d(64),
            nn.ReLU(inplace=True),
        )
        self.RFC2_4 = nn.Sequential(
            nn.ConvTranspose2d(512, 64, 4, 4),
            nn.BatchNorm2d(64),
            nn.ReLU(inplace=True),
        )
        self.RFC2_5 = nn.Sequential(
            nn.ConvTranspose2d(512, 64, 8, 8),
            nn.BatchNorm2d(64),
            nn.ReLU(inplace=True),
        )

        self.RFC3_1 = nn.Sequential(
            nn.Conv2d(64, 64, 4, 4),
            nn.BatchNorm2d(64),
            nn.ReLU(inplace=True),
        )
        self.RFC3_2 = nn.Sequential(
            nn.Conv2d(128, 64, 2, 2),
            nn.BatchNorm2d(64),
            nn.ReLU(inplace=True),
        )
        self.RFC3_3 = nn.Sequential(
            nn.Conv2d(256, 64, 1),
            nn.BatchNorm2d(64),
            nn.ReLU(inplace=True),
        )
        self.RFC3_4 = nn.Sequential(
            nn.ConvTranspose2d(512, 64, 2, 2),
            nn.BatchNorm2d(64),
            nn.ReLU(inplace=True),
        )
        self.RFC3_5 = nn.Sequential(
            nn.ConvTranspose2d(512, 64, 4, 4),
            nn.BatchNorm2d(64),
            nn.ReLU(inplace=True),
        )

        self.RFC4_1 = nn.Sequential(
            nn.Conv2d(64, 64, 8, 8),
            nn.BatchNorm2d(64),
            nn.ReLU(inplace=True),
        )
        self.RFC4_2 = nn.Sequential(
            nn.Conv2d(128, 64, 4, 4),
            nn.BatchNorm2d(64),
            nn.ReLU(inplace=True),
        )
        self.RFC4_3 = nn.Sequential(
            nn.Conv2d(256, 64, 2, 2),
            nn.BatchNorm2d(64),
            nn.ReLU(inplace=True),
        )
        self.RFC4_4 = nn.Sequential(
            nn.Conv2d(512, 64, 1),
            nn.BatchNorm2d(64),
            nn.ReLU(inplace=True),
        )
        self.RFC4_5 = nn.Sequential(
            nn.ConvTranspose2d(512, 64, 2, 2),
            nn.BatchNorm2d(64),
            nn.ReLU(inplace=True),
        )

        self.RFC5_1 = nn.Sequential(
            nn.Conv2d(64, 64, 16, 16),
            nn.BatchNorm2d(64),
            nn.ReLU(inplace=True),
        )
        self.RFC5_2 = nn.Sequential(
            nn.Conv2d(128, 64, 8, 8),
            nn.BatchNorm2d(64),
            nn.ReLU(inplace=True),
        )
        self.RFC5_3 = nn.Sequential(
            nn.Conv2d(256, 64, 4, 4),
            nn.BatchNorm2d(64),
            nn.ReLU(inplace=True),
        )
        self.RFC5_4 = nn.Sequential(
            nn.Conv2d(512, 64, 2, 2),
            nn.BatchNorm2d(64),
            nn.ReLU(inplace=True),
        )
        self.RFC5_5 = nn.Sequential(
            nn.Conv2d(512, 64, 1),
            nn.BatchNorm2d(64),
            nn.ReLU(inplace=True),
        )


        
        self.dsn1 = nn.Sequential(
            nn.Conv2d(320, 1, 1),
            nn.BatchNorm2d(1),
        )
        self.dsn2 = nn.Sequential(
            nn.Conv2d(320, 1, 1),
            nn.BatchNorm2d(1),
        )
        self.dsn3 = nn.Sequential(
            nn.Conv2d(320, 1, 1),
            nn.BatchNorm2d(1),
        )
        self.dsn4 = nn.Sequential(
            nn.Conv2d(320, 1, 1),
            nn.BatchNorm2d(1),
        )
        self.dsn5 = nn.Sequential(
            nn.Conv2d(320, 1, 1),
            nn.BatchNorm2d(1),
        )
        self.dsn6 = nn.Sequential(
            nn.Conv2d(5, 1, 1),
            nn.BatchNorm2d(1),
        )
        
        self.upscore2 = nn.UpsamplingBilinear2d(scale_factor=2)
        self.upscore3 = nn.UpsamplingBilinear2d(scale_factor=4)
        self.upscore4 = nn.UpsamplingBilinear2d(scale_factor=8)
        self.upscore5 = nn.UpsamplingBilinear2d(scale_factor=16)

        self.conv7 = nn.Sequential(
            nn.Conv2d(3, 1, 1),
            nn.BatchNorm2d(1),
        )
        self.conv1_O = nn.Sequential(
            nn.Conv2d(3, 64, 1),
            nn.BatchNorm2d(64),
            nn.ReLU(inplace=True),
        )
        self.conv1_R = nn.Sequential(
            nn.Conv2d(9, 64, 1),
            nn.BatchNorm2d(64),
            nn.ReLU(inplace=True),
        )
        self.conv1_R2 = nn.Sequential(
            nn.Conv2d(9, 64, 1),
            nn.BatchNorm2d(64),
            nn.ReLU(inplace=True),
        )

    def forward(self, x, h_0, c_0):
        conv1_O = self.conv1_O(x)
        conv1 = self.conv1(conv1_O)
        conv2 = self.conv2(conv1)
        conv3 = self.conv3(conv2)
        conv4 = self.conv4(conv3)
        conv5 = self.conv5(conv4)

        ## side output
        d5 = self.upscore5(self.dsn5(torch.cat((self.RFC5_1(conv1), self.RFC5_2(conv2), self.RFC5_3(conv3), self.RFC5_4(conv4), self.RFC5_5(conv5)), 1)))
        
        d4 = self.upscore4(self.dsn4(torch.cat((self.RFC4_1(conv1), self.RFC4_2(conv2), self.RFC4_3(conv3), self.RFC4_4(conv4), self.RFC4_5(conv5)), 1)))
        
        d3 = self.upscore3(self.dsn3(torch.cat((self.RFC3_1(conv1), self.RFC3_2(conv2), self.RFC3_3(conv3), self.RFC3_4(conv4), self.RFC3_5(conv5)), 1)))
        
        d2 = self.upscore2(self.dsn2(torch.cat((self.RFC2_1(conv1), self.RFC2_2(conv2), self.RFC2_3(conv3), self.RFC2_4(conv4), self.RFC2_5(conv5)), 1)))
        
        d1 = self.dsn1(torch.cat((self.RFC1_1(conv1), self.RFC1_2(conv2), self.RFC1_3(conv3), self.RFC1_4(conv4), self.RFC1_5(conv5)), 1))

        # dsn fusion output
        d6 = self.dsn6(torch.cat((d1, d2, d3, d4, d5), 1))
        
        d1 = F.sigmoid(d1)
        d2 = F.sigmoid(d2)
        d3 = F.sigmoid(d3)
        d4 = F.sigmoid(d4)
        d5 = F.sigmoid(d5)
        fuse = F.sigmoid(d6)

        m = torch.cat((x, d1, d2, d3, d4, d5, fuse), 1)
        ## stage 1 ###

        conv1_O_R = self.conv1_R(m)
        conv1_R = self.conv1(conv1_O_R)
        conv2_R = self.conv2(conv1_R)
        conv3_R = self.conv3(conv2_R)
        conv4_R = self.conv4(conv3_R)
        conv5_R = self.conv5(conv4_R)

        ## side output
        d5_R = self.upscore5(self.dsn5(torch.cat((self.RFC5_1(conv1_R), self.RFC5_2(conv2_R), self.RFC5_3(conv3_R), self.RFC5_4(conv4_R), self.RFC5_5(conv5_R)), 1)))
        
        d4_R = self.upscore4(self.dsn4(torch.cat((self.RFC4_1(conv1_R), self.RFC4_2(conv2_R), self.RFC4_3(conv3_R), self.RFC4_4(conv4_R), self.RFC4_5(conv5_R)), 1)))
        
        d3_R = self.upscore3(self.dsn3(torch.cat((self.RFC3_1(conv1_R), self.RFC3_2(conv2_R), self.RFC3_3(conv3_R), self.RFC3_4(conv4_R), self.RFC3_5(conv5_R)), 1)))
        
        d2_R = self.upscore2(self.dsn2(torch.cat((self.RFC2_1(conv1_R), self.RFC2_2(conv2_R), self.RFC2_3(conv3_R), self.RFC2_4(conv4_R), self.RFC2_5(conv5_R)), 1)))
        
        d1_R = self.dsn1(torch.cat((self.RFC1_1(conv1_R), self.RFC1_2(conv2_R), self.RFC1_3(conv3_R), self.RFC1_4(conv4_R), self.RFC1_5(conv5_R)), 1))

        # dsn fusion output
        d6_R = self.dsn6(torch.cat((d1_R, d2_R, d3_R, d4_R, d5_R), 1))
        
        d1_R = F.sigmoid(d1_R)
        d2_R = F.sigmoid(d2_R)
        d3_R = F.sigmoid(d3_R)
        d4_R = F.sigmoid(d4_R)
        d5_R = F.sigmoid(d5_R)
        fuse_R = F.sigmoid(d6_R) 

        m_R = torch.cat((x, d1_R, d2_R, d3_R, d4_R, d5_R, fuse_R), 1)
        ## stage 2 ###

        conv1_O_R2 = self.conv1_R2(m_R)
        conv1_R2 = self.conv1(conv1_O_R2)
        conv2_R2 = self.conv2(conv1_R2)
        conv3_R2 = self.conv3(conv2_R2)
        conv4_R2 = self.conv4(conv3_R2)
        conv5_R2 = self.conv5(conv4_R2)
        #### lstm ######
        l1 = conv5_R2.view(1, 512, 1024)
        l2, (h_n, c_n) = self.lstm(l1, (h_0, c_0))

        ## side output
        d5_R2 = self.upscore5(self.dsn5(torch.cat((self.RFC5_1(conv1_R2), self.RFC5_2(conv2_R2), self.RFC5_3(conv3_R2), self.RFC5_4(conv4_R2), self.RFC5_5(conv5_R2)), 1)))
        
        d4_R2 = self.upscore4(self.dsn4(torch.cat((self.RFC4_1(conv1_R2), self.RFC4_2(conv2_R2), self.RFC4_3(conv3_R2), self.RFC4_4(conv4_R2), self.RFC4_5(conv5_R2)), 1)))
        
        d3_R2 = self.upscore3(self.dsn3(torch.cat((self.RFC3_1(conv1_R2), self.RFC3_2(conv2_R2), self.RFC3_3(conv3_R2), self.RFC3_4(conv4_R2), self.RFC3_5(conv5_R2)), 1)))
        
        d2_R2 = self.upscore2(self.dsn2(torch.cat((self.RFC2_1(conv1_R2), self.RFC2_2(conv2_R2), self.RFC2_3(conv3_R2), self.RFC2_4(conv4_R2), self.RFC2_5(conv5_R2)), 1)))
        
        d1_R2 = self.dsn1(torch.cat((self.RFC1_1(conv1_R2), self.RFC1_2(conv2_R2), self.RFC1_3(conv3_R2), self.RFC1_4(conv4_R2), self.RFC1_5(conv5_R2)), 1))

        # dsn fusion output
        d6_R2 = self.dsn6(torch.cat((d1_R2, d2_R2, d3_R2, d4_R2, d5_R2), 1))
        
        d1_R2 = F.sigmoid(d1_R2)
        d2_R2 = F.sigmoid(d2_R2)
        d3_R2 = F.sigmoid(d3_R2)
        d4_R2 = F.sigmoid(d4_R2)
        d5_R2 = F.sigmoid(d5_R2)
        fuse_R2 = F.sigmoid(d6_R2)

        c1_R2 = torch.cat((fuse, fuse_R, fuse_R2), 1)
        c2_R2 = self.conv7(c1_R2)
        final = F.sigmoid(c2_R2)
        
        return d1, d2, d3, d4, d5, fuse, d1_R, d2_R, d3_R, d4_R, d5_R, fuse_R, d1_R2, d2_R2, d3_R2, d4_R2, d5_R2, fuse_R2, final
